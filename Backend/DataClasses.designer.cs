#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lawspot.Backend
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Lawspot")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertMigration(Migration instance);
    partial void UpdateMigration(Migration instance);
    partial void DeleteMigration(Migration instance);
    partial void InsertDraftAnswer(DraftAnswer instance);
    partial void UpdateDraftAnswer(DraftAnswer instance);
    partial void DeleteDraftAnswer(DraftAnswer instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertPublisher(Publisher instance);
    partial void UpdatePublisher(Publisher instance);
    partial void DeletePublisher(Publisher instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertConflictDeclaration(ConflictDeclaration instance);
    partial void UpdateConflictDeclaration(ConflictDeclaration instance);
    partial void DeleteConflictDeclaration(ConflictDeclaration instance);
    partial void InsertPublisherCategory(PublisherCategory instance);
    partial void UpdatePublisherCategory(PublisherCategory instance);
    partial void DeletePublisherCategory(PublisherCategory instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LawspotConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<Migration> Migrations
		{
			get
			{
				return this.GetTable<Migration>();
			}
		}
		
		public System.Data.Linq.Table<DraftAnswer> DraftAnswers
		{
			get
			{
				return this.GetTable<DraftAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<Publisher> Publishers
		{
			get
			{
				return this.GetTable<Publisher>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ConflictDeclaration> ConflictDeclarations
		{
			get
			{
				return this.GetTable<ConflictDeclaration>();
			}
		}
		
		public System.Data.Linq.Table<PublisherCategory> PublisherCategories
		{
			get
			{
				return this.GetTable<PublisherCategory>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegionId;
		
		private string _Name;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegionIdChanging(int value);
    partial void OnRegionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Region()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegionId
		{
			get
			{
				return this._RegionId;
			}
			set
			{
				if ((this._RegionId != value))
				{
					this.OnRegionIdChanging(value);
					this.SendPropertyChanging();
					this._RegionId = value;
					this.SendPropertyChanged("RegionId");
					this.OnRegionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_User", Storage="_Users", ThisKey="RegionId", OtherKey="RegionId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Migrations")]
	public partial class Migration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MigrationId;
		
		private int _Version;
		
		private System.DateTimeOffset _RunAt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMigrationIdChanging(int value);
    partial void OnMigrationIdChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnRunAtChanging(System.DateTimeOffset value);
    partial void OnRunAtChanged();
    #endregion
		
		public Migration()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MigrationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MigrationId
		{
			get
			{
				return this._MigrationId;
			}
			set
			{
				if ((this._MigrationId != value))
				{
					this.OnMigrationIdChanging(value);
					this.SendPropertyChanging();
					this._MigrationId = value;
					this.SendPropertyChanged("MigrationId");
					this.OnMigrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunAt", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset RunAt
		{
			get
			{
				return this._RunAt;
			}
			set
			{
				if ((this._RunAt != value))
				{
					this.OnRunAtChanging(value);
					this.SendPropertyChanging();
					this._RunAt = value;
					this.SendPropertyChanged("RunAt");
					this.OnRunAtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DraftAnswer")]
	public partial class DraftAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DraftAnswerId;
		
		private int _QuestionId;
		
		private string _Details;
		
		private string _References;
		
		private System.DateTimeOffset _CreatedOn;
		
		private int _CreatedByUserId;
		
		private System.DateTimeOffset _UpdatedOn;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<User> _CreatedByUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDraftAnswerIdChanging(int value);
    partial void OnDraftAnswerIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnReferencesChanging(string value);
    partial void OnReferencesChanged();
    partial void OnCreatedOnChanging(System.DateTimeOffset value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnUpdatedOnChanging(System.DateTimeOffset value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public DraftAnswer()
		{
			this._Question = default(EntityRef<Question>);
			this._CreatedByUser = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DraftAnswerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DraftAnswerId
		{
			get
			{
				return this._DraftAnswerId;
			}
			set
			{
				if ((this._DraftAnswerId != value))
				{
					this.OnDraftAnswerIdChanging(value);
					this.SendPropertyChanging();
					this._DraftAnswerId = value;
					this.SendPropertyChanged("DraftAnswerId");
					this.OnDraftAnswerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[References]", Storage="_References", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string References
		{
			get
			{
				return this._References;
			}
			set
			{
				if ((this._References != value))
				{
					this.OnReferencesChanging(value);
					this.SendPropertyChanging();
					this._References = value;
					this.SendPropertyChanged("References");
					this.OnReferencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._CreatedByUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_DraftAnswer", Storage="_Question", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.DraftAnswers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.DraftAnswers.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DraftAnswer", Storage="_CreatedByUser", ThisKey="CreatedByUserId", OtherKey="UserId", IsForeignKey=true)]
		public User CreatedByUser
		{
			get
			{
				return this._CreatedByUser.Entity;
			}
			set
			{
				User previousValue = this._CreatedByUser.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByUser.Entity = null;
						previousValue.DraftAnswers.Remove(this);
					}
					this._CreatedByUser.Entity = value;
					if ((value != null))
					{
						value.DraftAnswers.Add(this);
						this._CreatedByUserId = value.UserId;
					}
					else
					{
						this._CreatedByUserId = default(int);
					}
					this.SendPropertyChanged("CreatedByUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _Name;
		
		private string _Slug;
		
		private int _ApprovedQuestionCount;
		
		private int _AnsweredQuestionCount;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSlugChanging(string value);
    partial void OnSlugChanged();
    partial void OnApprovedQuestionCountChanging(int value);
    partial void OnApprovedQuestionCountChanged();
    partial void OnAnsweredQuestionCountChanging(int value);
    partial void OnAnsweredQuestionCountChanged();
    #endregion
		
		public Category()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Slug", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Slug
		{
			get
			{
				return this._Slug;
			}
			set
			{
				if ((this._Slug != value))
				{
					this.OnSlugChanging(value);
					this.SendPropertyChanging();
					this._Slug = value;
					this.SendPropertyChanged("Slug");
					this.OnSlugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedQuestionCount", DbType="Int NOT NULL")]
		public int ApprovedQuestionCount
		{
			get
			{
				return this._ApprovedQuestionCount;
			}
			set
			{
				if ((this._ApprovedQuestionCount != value))
				{
					this.OnApprovedQuestionCountChanging(value);
					this.SendPropertyChanging();
					this._ApprovedQuestionCount = value;
					this.SendPropertyChanged("ApprovedQuestionCount");
					this.OnApprovedQuestionCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnsweredQuestionCount", DbType="Int NOT NULL")]
		public int AnsweredQuestionCount
		{
			get
			{
				return this._AnsweredQuestionCount;
			}
			set
			{
				if ((this._AnsweredQuestionCount != value))
				{
					this.OnAnsweredQuestionCountChanging(value);
					this.SendPropertyChanging();
					this._AnsweredQuestionCount = value;
					this.SendPropertyChanged("AnsweredQuestionCount");
					this.OnAnsweredQuestionCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Question", Storage="_Questions", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_User", Storage="_Users", ThisKey="CategoryId", OtherKey="SpecialisationCategoryId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.SpecialisationCategory = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.SpecialisationCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionId;
		
		private string _Title;
		
		private string _Details;
		
		private int _CategoryId;
		
		private System.DateTimeOffset _CreatedOn;
		
		private int _CreatedByUserId;
		
		private int _ViewCount;
		
		private string _Slug;
		
		private System.Nullable<System.DateTimeOffset> _ReviewDate;
		
		private System.Nullable<int> _ReviewedByUserId;
		
		private string _RejectionReason;
		
		private string _OriginalTitle;
		
		private string _OriginalDetails;
		
		private Lawspot.Backend.QuestionStatus _Status;
		
		private EntitySet<DraftAnswer> _DraftAnswers;
		
		private EntitySet<Answer> _Answers;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<User> _CreatedByUser;
		
		private EntityRef<User> _ReviewedByUser;
		
		private EntityRef<ConflictDeclaration> _ConflictDeclaration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnCreatedOnChanging(System.DateTimeOffset value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnViewCountChanging(int value);
    partial void OnViewCountChanged();
    partial void OnSlugChanging(string value);
    partial void OnSlugChanged();
    partial void OnReviewDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnReviewDateChanged();
    partial void OnReviewedByUserIdChanging(System.Nullable<int> value);
    partial void OnReviewedByUserIdChanged();
    partial void OnRejectionReasonChanging(string value);
    partial void OnRejectionReasonChanged();
    partial void OnOriginalTitleChanging(string value);
    partial void OnOriginalTitleChanged();
    partial void OnOriginalDetailsChanging(string value);
    partial void OnOriginalDetailsChanged();
    partial void OnStatusChanging(Lawspot.Backend.QuestionStatus value);
    partial void OnStatusChanged();
    #endregion
		
		public Question()
		{
			this._DraftAnswers = new EntitySet<DraftAnswer>(new Action<DraftAnswer>(this.attach_DraftAnswers), new Action<DraftAnswer>(this.detach_DraftAnswers));
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Category = default(EntityRef<Category>);
			this._CreatedByUser = default(EntityRef<User>);
			this._ReviewedByUser = default(EntityRef<User>);
			this._ConflictDeclaration = default(EntityRef<ConflictDeclaration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._ConflictDeclaration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(600) NOT NULL", CanBeNull=false)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._CreatedByUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewCount", DbType="Int NOT NULL")]
		public int ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Slug", DbType="VarChar(70) NOT NULL", CanBeNull=false)]
		public string Slug
		{
			get
			{
				return this._Slug;
			}
			set
			{
				if ((this._Slug != value))
				{
					this.OnSlugChanging(value);
					this.SendPropertyChanging();
					this._Slug = value;
					this.SendPropertyChanged("Slug");
					this.OnSlugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ReviewDate
		{
			get
			{
				return this._ReviewDate;
			}
			set
			{
				if ((this._ReviewDate != value))
				{
					this.OnReviewDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewDate = value;
					this.SendPropertyChanged("ReviewDate");
					this.OnReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewedByUserId", DbType="Int")]
		public System.Nullable<int> ReviewedByUserId
		{
			get
			{
				return this._ReviewedByUserId;
			}
			set
			{
				if ((this._ReviewedByUserId != value))
				{
					if (this._ReviewedByUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._ReviewedByUserId = value;
					this.SendPropertyChanged("ReviewedByUserId");
					this.OnReviewedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RejectionReason", DbType="NVarChar(MAX)")]
		public string RejectionReason
		{
			get
			{
				return this._RejectionReason;
			}
			set
			{
				if ((this._RejectionReason != value))
				{
					this.OnRejectionReasonChanging(value);
					this.SendPropertyChanging();
					this._RejectionReason = value;
					this.SendPropertyChanged("RejectionReason");
					this.OnRejectionReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalTitle", DbType="NVarChar(150)")]
		public string OriginalTitle
		{
			get
			{
				return this._OriginalTitle;
			}
			set
			{
				if ((this._OriginalTitle != value))
				{
					this.OnOriginalTitleChanging(value);
					this.SendPropertyChanging();
					this._OriginalTitle = value;
					this.SendPropertyChanged("OriginalTitle");
					this.OnOriginalTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalDetails", DbType="NVarChar(600)")]
		public string OriginalDetails
		{
			get
			{
				return this._OriginalDetails;
			}
			set
			{
				if ((this._OriginalDetails != value))
				{
					this.OnOriginalDetailsChanging(value);
					this.SendPropertyChanging();
					this._OriginalDetails = value;
					this.SendPropertyChanged("OriginalDetails");
					this.OnOriginalDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status")]
		public Lawspot.Backend.QuestionStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_DraftAnswer", Storage="_DraftAnswers", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<DraftAnswer> DraftAnswers
		{
			get
			{
				return this._DraftAnswers;
			}
			set
			{
				this._DraftAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Answers", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Question", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Question", Storage="_CreatedByUser", ThisKey="CreatedByUserId", OtherKey="UserId", IsForeignKey=true)]
		public User CreatedByUser
		{
			get
			{
				return this._CreatedByUser.Entity;
			}
			set
			{
				User previousValue = this._CreatedByUser.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByUser.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._CreatedByUser.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._CreatedByUserId = value.UserId;
					}
					else
					{
						this._CreatedByUserId = default(int);
					}
					this.SendPropertyChanged("CreatedByUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Question1", Storage="_ReviewedByUser", ThisKey="ReviewedByUserId", OtherKey="UserId", IsForeignKey=true)]
		public User ReviewedByUser
		{
			get
			{
				return this._ReviewedByUser.Entity;
			}
			set
			{
				User previousValue = this._ReviewedByUser.Entity;
				if (((previousValue != value) 
							|| (this._ReviewedByUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReviewedByUser.Entity = null;
						previousValue.Questions1.Remove(this);
					}
					this._ReviewedByUser.Entity = value;
					if ((value != null))
					{
						value.Questions1.Add(this);
						this._ReviewedByUserId = value.UserId;
					}
					else
					{
						this._ReviewedByUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReviewedByUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConflictDeclaration_Question", Storage="_ConflictDeclaration", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public ConflictDeclaration ConflictDeclaration
		{
			get
			{
				return this._ConflictDeclaration.Entity;
			}
			set
			{
				ConflictDeclaration previousValue = this._ConflictDeclaration.Entity;
				if (((previousValue != value) 
							|| (this._ConflictDeclaration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConflictDeclaration.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._ConflictDeclaration.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("ConflictDeclaration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DraftAnswers(DraftAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_DraftAnswers(DraftAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answer")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerId;
		
		private int _QuestionId;
		
		private string _Details;
		
		private System.DateTimeOffset _CreatedOn;
		
		private int _CreatedByUserId;
		
		private System.Nullable<System.DateTimeOffset> _ReviewDate;
		
		private System.Nullable<int> _ReviewedByUserId;
		
		private string _RejectionReason;
		
		private string _References;
		
		private string _OriginalDetails;
		
		private System.Nullable<int> _PublisherId;
		
		private Lawspot.Backend.AnswerStatus _Status;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Publisher> _Publisher;
		
		private EntityRef<User> _CreatedByUser;
		
		private EntityRef<User> _ReviewedByUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerIdChanging(int value);
    partial void OnAnswerIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnCreatedOnChanging(System.DateTimeOffset value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnReviewDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnReviewDateChanged();
    partial void OnReviewedByUserIdChanging(System.Nullable<int> value);
    partial void OnReviewedByUserIdChanged();
    partial void OnRejectionReasonChanging(string value);
    partial void OnRejectionReasonChanged();
    partial void OnReferencesChanging(string value);
    partial void OnReferencesChanged();
    partial void OnOriginalDetailsChanging(string value);
    partial void OnOriginalDetailsChanged();
    partial void OnPublisherIdChanging(System.Nullable<int> value);
    partial void OnPublisherIdChanged();
    partial void OnStatusChanging(Lawspot.Backend.AnswerStatus value);
    partial void OnStatusChanged();
    #endregion
		
		public Answer()
		{
			this._Question = default(EntityRef<Question>);
			this._Publisher = default(EntityRef<Publisher>);
			this._CreatedByUser = default(EntityRef<User>);
			this._ReviewedByUser = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnswerId
		{
			get
			{
				return this._AnswerId;
			}
			set
			{
				if ((this._AnswerId != value))
				{
					this.OnAnswerIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerId = value;
					this.SendPropertyChanged("AnswerId");
					this.OnAnswerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._CreatedByUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ReviewDate
		{
			get
			{
				return this._ReviewDate;
			}
			set
			{
				if ((this._ReviewDate != value))
				{
					this.OnReviewDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewDate = value;
					this.SendPropertyChanged("ReviewDate");
					this.OnReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewedByUserId", DbType="Int")]
		public System.Nullable<int> ReviewedByUserId
		{
			get
			{
				return this._ReviewedByUserId;
			}
			set
			{
				if ((this._ReviewedByUserId != value))
				{
					if (this._ReviewedByUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._ReviewedByUserId = value;
					this.SendPropertyChanged("ReviewedByUserId");
					this.OnReviewedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RejectionReason", DbType="NVarChar(MAX)")]
		public string RejectionReason
		{
			get
			{
				return this._RejectionReason;
			}
			set
			{
				if ((this._RejectionReason != value))
				{
					this.OnRejectionReasonChanging(value);
					this.SendPropertyChanging();
					this._RejectionReason = value;
					this.SendPropertyChanged("RejectionReason");
					this.OnRejectionReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[References]", Storage="_References", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string References
		{
			get
			{
				return this._References;
			}
			set
			{
				if ((this._References != value))
				{
					this.OnReferencesChanging(value);
					this.SendPropertyChanging();
					this._References = value;
					this.SendPropertyChanged("References");
					this.OnReferencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalDetails", DbType="NVarChar(MAX)")]
		public string OriginalDetails
		{
			get
			{
				return this._OriginalDetails;
			}
			set
			{
				if ((this._OriginalDetails != value))
				{
					this.OnOriginalDetailsChanging(value);
					this.SendPropertyChanging();
					this._OriginalDetails = value;
					this.SendPropertyChanged("OriginalDetails");
					this.OnOriginalDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherId")]
		public System.Nullable<int> PublisherId
		{
			get
			{
				return this._PublisherId;
			}
			set
			{
				if ((this._PublisherId != value))
				{
					if (this._Publisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublisherIdChanging(value);
					this.SendPropertyChanging();
					this._PublisherId = value;
					this.SendPropertyChanged("PublisherId");
					this.OnPublisherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status")]
		public Lawspot.Backend.AnswerStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Question", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_Answer", Storage="_Publisher", ThisKey="PublisherId", OtherKey="PublisherId", IsForeignKey=true)]
		public Publisher Publisher
		{
			get
			{
				return this._Publisher.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher.Entity;
				if (((previousValue != value) 
							|| (this._Publisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Publisher.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._PublisherId = value.PublisherId;
					}
					else
					{
						this._PublisherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Publisher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Answer", Storage="_CreatedByUser", ThisKey="CreatedByUserId", OtherKey="UserId", IsForeignKey=true)]
		public User CreatedByUser
		{
			get
			{
				return this._CreatedByUser.Entity;
			}
			set
			{
				User previousValue = this._CreatedByUser.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByUser.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._CreatedByUser.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._CreatedByUserId = value.UserId;
					}
					else
					{
						this._CreatedByUserId = default(int);
					}
					this.SendPropertyChanged("CreatedByUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Answer1", Storage="_ReviewedByUser", ThisKey="ReviewedByUserId", OtherKey="UserId", IsForeignKey=true)]
		public User ReviewedByUser
		{
			get
			{
				return this._ReviewedByUser.Entity;
			}
			set
			{
				User previousValue = this._ReviewedByUser.Entity;
				if (((previousValue != value) 
							|| (this._ReviewedByUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReviewedByUser.Entity = null;
						previousValue.Answers1.Remove(this);
					}
					this._ReviewedByUser.Entity = value;
					if ((value != null))
					{
						value.Answers1.Add(this);
						this._ReviewedByUserId = value.UserId;
					}
					else
					{
						this._ReviewedByUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReviewedByUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Publisher")]
	public partial class Publisher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PublisherId;
		
		private string _Name;
		
		private string _ShortDescription;
		
		private string _LongDescription;
		
		private string _EmailAddress;
		
		private string _PhoneNumber;
		
		private string _WebsiteUri;
		
		private string _PhysicalAddress;
		
		private System.Data.Linq.Link<byte[]> _Logo;
		
		private EntitySet<Answer> _Answers;
		
		private EntitySet<User> _Users;
		
		private EntitySet<PublisherCategory> _PublisherCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublisherIdChanging(int value);
    partial void OnPublisherIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnWebsiteUriChanging(string value);
    partial void OnWebsiteUriChanged();
    partial void OnPhysicalAddressChanging(string value);
    partial void OnPhysicalAddressChanged();
    partial void OnLogoChanging(byte[] value);
    partial void OnLogoChanged();
    #endregion
		
		public Publisher()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._PublisherCategories = new EntitySet<PublisherCategory>(new Action<PublisherCategory>(this.attach_PublisherCategories), new Action<PublisherCategory>(this.detach_PublisherCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PublisherId
		{
			get
			{
				return this._PublisherId;
			}
			set
			{
				if ((this._PublisherId != value))
				{
					this.OnPublisherIdChanging(value);
					this.SendPropertyChanging();
					this._PublisherId = value;
					this.SendPropertyChanged("PublisherId");
					this.OnPublisherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="NVarChar(250) NULL")]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="NVarChar(MAX) NULL")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVARCHAR(256) NULL")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVARCHAR(50) NULL")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteUri", DbType="NVARCHAR(256) NULL")]
		public string WebsiteUri
		{
			get
			{
				return this._WebsiteUri;
			}
			set
			{
				if ((this._WebsiteUri != value))
				{
					this.OnWebsiteUriChanging(value);
					this.SendPropertyChanging();
					this._WebsiteUri = value;
					this.SendPropertyChanged("WebsiteUri");
					this.OnWebsiteUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalAddress", DbType="NVARCHAR(256) NULL")]
		public string PhysicalAddress
		{
			get
			{
				return this._PhysicalAddress;
			}
			set
			{
				if ((this._PhysicalAddress != value))
				{
					this.OnPhysicalAddressChanging(value);
					this.SendPropertyChanging();
					this._PhysicalAddress = value;
					this.SendPropertyChanged("PhysicalAddress");
					this.OnPhysicalAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="VARBINARY(MAX) NULL", UpdateCheck=UpdateCheck.Never)]
		public byte[] Logo
		{
			get
			{
				return this._Logo.Value;
			}
			set
			{
				if ((this._Logo.Value != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo.Value = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_Answer", Storage="_Answers", ThisKey="PublisherId", OtherKey="PublisherId")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_User", Storage="_Users", ThisKey="PublisherId", OtherKey="PublisherId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_PublisherCategory", Storage="_PublisherCategories", ThisKey="PublisherId", OtherKey="PublisherId")]
		public EntitySet<PublisherCategory> PublisherCategories
		{
			get
			{
				return this._PublisherCategories;
			}
			set
			{
				this._PublisherCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = null;
		}
		
		private void attach_PublisherCategories(PublisherCategory entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = this;
		}
		
		private void detach_PublisherCategories(PublisherCategory entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventStream")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private System.DateTimeOffset _EventDate;
		
		private Lawspot.Backend.EventType _EventType;
		
		private int _UserId;
		
		private string _Details;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventDateChanging(System.DateTimeOffset value);
    partial void OnEventDateChanged();
    partial void OnEventTypeChanging(Lawspot.Backend.EventType value);
    partial void OnEventTypeChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
		
		public Event()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType")]
		public Lawspot.Backend.EventType EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Event", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _EmailAddress;
		
		private string _Password;
		
		private int _RegionId;
		
		private System.DateTimeOffset _CreatedOn;
		
		private bool _CanAnswerQuestions;
		
		private bool _CanVetQuestions;
		
		private bool _CanVetAnswers;
		
		private bool _CanVetLawyers;
		
		private System.Nullable<bool> _EmailValidated;
		
		private string _EmailValidationToken;
		
		private bool _CanAdminister;
		
		private System.Nullable<System.DateTimeOffset> _LastLogInDate;
		
		private int _LogInCount;
		
		private string _LogInIpAddress;
		
		private System.Nullable<int> _CommunityServicesCardNumber;
		
		private string _ResetPasswordToken;
		
		private System.Nullable<System.DateTimeOffset> _ResetPasswordTokenExpiry;
		
		private System.Nullable<int> _PublisherId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<int> _YearOfAdmission;
		
		private System.Nullable<int> _SpecialisationCategoryId;
		
		private string _EmployerName;
		
		private System.Nullable<bool> _ApprovedAsLawyer;
		
		private System.Nullable<System.DateTimeOffset> _ReviewDate;
		
		private System.Nullable<int> _ReviewedByUserId;
		
		private string _RejectionReason;
		
		private string _PhoneNumber;
		
		private bool _CanPublish;
		
		private bool _HasPractisingAuthority;
		
		private EntitySet<DraftAnswer> _DraftAnswers;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<Question> _Questions1;
		
		private EntitySet<Answer> _Answers;
		
		private EntitySet<Answer> _Answers1;
		
		private EntitySet<Event> _Events;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Publisher> _Publisher;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<ConflictDeclaration> _ConflictDeclaration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRegionIdChanging(int value);
    partial void OnRegionIdChanged();
    partial void OnCreatedOnChanging(System.DateTimeOffset value);
    partial void OnCreatedOnChanged();
    partial void OnCanAnswerQuestionsChanging(bool value);
    partial void OnCanAnswerQuestionsChanged();
    partial void OnCanVetQuestionsChanging(bool value);
    partial void OnCanVetQuestionsChanged();
    partial void OnCanVetAnswersChanging(bool value);
    partial void OnCanVetAnswersChanged();
    partial void OnCanVetLawyersChanging(bool value);
    partial void OnCanVetLawyersChanged();
    partial void OnEmailValidatedChanging(System.Nullable<bool> value);
    partial void OnEmailValidatedChanged();
    partial void OnEmailValidationTokenChanging(string value);
    partial void OnEmailValidationTokenChanged();
    partial void OnCanAdministerChanging(bool value);
    partial void OnCanAdministerChanged();
    partial void OnLastLogInDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnLastLogInDateChanged();
    partial void OnLogInCountChanging(int value);
    partial void OnLogInCountChanged();
    partial void OnLogInIpAddressChanging(string value);
    partial void OnLogInIpAddressChanged();
    partial void OnCommunityServicesCardNumberChanging(System.Nullable<int> value);
    partial void OnCommunityServicesCardNumberChanged();
    partial void OnResetPasswordTokenChanging(string value);
    partial void OnResetPasswordTokenChanged();
    partial void OnResetPasswordTokenExpiryChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnResetPasswordTokenExpiryChanged();
    partial void OnPublisherIdChanging(System.Nullable<int> value);
    partial void OnPublisherIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnYearOfAdmissionChanging(System.Nullable<int> value);
    partial void OnYearOfAdmissionChanged();
    partial void OnSpecialisationCategoryIdChanging(System.Nullable<int> value);
    partial void OnSpecialisationCategoryIdChanged();
    partial void OnEmployerNameChanging(string value);
    partial void OnEmployerNameChanged();
    partial void OnApprovedAsLawyerChanging(System.Nullable<bool> value);
    partial void OnApprovedAsLawyerChanged();
    partial void OnReviewDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnReviewDateChanged();
    partial void OnReviewedByUserIdChanging(System.Nullable<int> value);
    partial void OnReviewedByUserIdChanged();
    partial void OnRejectionReasonChanging(string value);
    partial void OnRejectionReasonChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnCanPublishChanging(bool value);
    partial void OnCanPublishChanged();
    partial void OnHasPractisingAuthorityChanging(bool value);
    partial void OnHasPractisingAuthorityChanged();
    #endregion
		
		public User()
		{
			this._DraftAnswers = new EntitySet<DraftAnswer>(new Action<DraftAnswer>(this.attach_DraftAnswers), new Action<DraftAnswer>(this.detach_DraftAnswers));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._Questions1 = new EntitySet<Question>(new Action<Question>(this.attach_Questions1), new Action<Question>(this.detach_Questions1));
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Answers1 = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers1), new Action<Answer>(this.detach_Answers1));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Category = default(EntityRef<Category>);
			this._Publisher = default(EntityRef<Publisher>);
			this._Region = default(EntityRef<Region>);
			this._ConflictDeclaration = default(EntityRef<ConflictDeclaration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._ConflictDeclaration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionId", DbType="Int NOT NULL")]
		public int RegionId
		{
			get
			{
				return this._RegionId;
			}
			set
			{
				if ((this._RegionId != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIdChanging(value);
					this.SendPropertyChanging();
					this._RegionId = value;
					this.SendPropertyChanged("RegionId");
					this.OnRegionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanAnswerQuestions", DbType="Bit NOT NULL")]
		public bool CanAnswerQuestions
		{
			get
			{
				return this._CanAnswerQuestions;
			}
			set
			{
				if ((this._CanAnswerQuestions != value))
				{
					this.OnCanAnswerQuestionsChanging(value);
					this.SendPropertyChanging();
					this._CanAnswerQuestions = value;
					this.SendPropertyChanged("CanAnswerQuestions");
					this.OnCanAnswerQuestionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanVetQuestions", DbType="Bit NOT NULL")]
		public bool CanVetQuestions
		{
			get
			{
				return this._CanVetQuestions;
			}
			set
			{
				if ((this._CanVetQuestions != value))
				{
					this.OnCanVetQuestionsChanging(value);
					this.SendPropertyChanging();
					this._CanVetQuestions = value;
					this.SendPropertyChanged("CanVetQuestions");
					this.OnCanVetQuestionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanVetAnswers", DbType="Bit NOT NULL")]
		public bool CanVetAnswers
		{
			get
			{
				return this._CanVetAnswers;
			}
			set
			{
				if ((this._CanVetAnswers != value))
				{
					this.OnCanVetAnswersChanging(value);
					this.SendPropertyChanging();
					this._CanVetAnswers = value;
					this.SendPropertyChanged("CanVetAnswers");
					this.OnCanVetAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanVetLawyers", DbType="Bit NOT NULL")]
		public bool CanVetLawyers
		{
			get
			{
				return this._CanVetLawyers;
			}
			set
			{
				if ((this._CanVetLawyers != value))
				{
					this.OnCanVetLawyersChanging(value);
					this.SendPropertyChanging();
					this._CanVetLawyers = value;
					this.SendPropertyChanged("CanVetLawyers");
					this.OnCanVetLawyersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailValidated", DbType="Bit")]
		public System.Nullable<bool> EmailValidated
		{
			get
			{
				return this._EmailValidated;
			}
			set
			{
				if ((this._EmailValidated != value))
				{
					this.OnEmailValidatedChanging(value);
					this.SendPropertyChanging();
					this._EmailValidated = value;
					this.SendPropertyChanged("EmailValidated");
					this.OnEmailValidatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailValidationToken", DbType="VarChar(50)")]
		public string EmailValidationToken
		{
			get
			{
				return this._EmailValidationToken;
			}
			set
			{
				if ((this._EmailValidationToken != value))
				{
					this.OnEmailValidationTokenChanging(value);
					this.SendPropertyChanging();
					this._EmailValidationToken = value;
					this.SendPropertyChanged("EmailValidationToken");
					this.OnEmailValidationTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanAdminister", DbType="Bit NOT NULL")]
		public bool CanAdminister
		{
			get
			{
				return this._CanAdminister;
			}
			set
			{
				if ((this._CanAdminister != value))
				{
					this.OnCanAdministerChanging(value);
					this.SendPropertyChanging();
					this._CanAdminister = value;
					this.SendPropertyChanged("CanAdminister");
					this.OnCanAdministerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogInDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> LastLogInDate
		{
			get
			{
				return this._LastLogInDate;
			}
			set
			{
				if ((this._LastLogInDate != value))
				{
					this.OnLastLogInDateChanging(value);
					this.SendPropertyChanging();
					this._LastLogInDate = value;
					this.SendPropertyChanged("LastLogInDate");
					this.OnLastLogInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogInCount", DbType="Int NOT NULL")]
		public int LogInCount
		{
			get
			{
				return this._LogInCount;
			}
			set
			{
				if ((this._LogInCount != value))
				{
					this.OnLogInCountChanging(value);
					this.SendPropertyChanging();
					this._LogInCount = value;
					this.SendPropertyChanged("LogInCount");
					this.OnLogInCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogInIpAddress", DbType="VarChar(45)")]
		public string LogInIpAddress
		{
			get
			{
				return this._LogInIpAddress;
			}
			set
			{
				if ((this._LogInIpAddress != value))
				{
					this.OnLogInIpAddressChanging(value);
					this.SendPropertyChanging();
					this._LogInIpAddress = value;
					this.SendPropertyChanged("LogInIpAddress");
					this.OnLogInIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunityServicesCardNumber", DbType="Int")]
		public System.Nullable<int> CommunityServicesCardNumber
		{
			get
			{
				return this._CommunityServicesCardNumber;
			}
			set
			{
				if ((this._CommunityServicesCardNumber != value))
				{
					this.OnCommunityServicesCardNumberChanging(value);
					this.SendPropertyChanging();
					this._CommunityServicesCardNumber = value;
					this.SendPropertyChanged("CommunityServicesCardNumber");
					this.OnCommunityServicesCardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResetPasswordToken", DbType="VarChar(50)")]
		public string ResetPasswordToken
		{
			get
			{
				return this._ResetPasswordToken;
			}
			set
			{
				if ((this._ResetPasswordToken != value))
				{
					this.OnResetPasswordTokenChanging(value);
					this.SendPropertyChanging();
					this._ResetPasswordToken = value;
					this.SendPropertyChanged("ResetPasswordToken");
					this.OnResetPasswordTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResetPasswordTokenExpiry", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ResetPasswordTokenExpiry
		{
			get
			{
				return this._ResetPasswordTokenExpiry;
			}
			set
			{
				if ((this._ResetPasswordTokenExpiry != value))
				{
					this.OnResetPasswordTokenExpiryChanging(value);
					this.SendPropertyChanging();
					this._ResetPasswordTokenExpiry = value;
					this.SendPropertyChanged("ResetPasswordTokenExpiry");
					this.OnResetPasswordTokenExpiryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherId", DbType="Int")]
		public System.Nullable<int> PublisherId
		{
			get
			{
				return this._PublisherId;
			}
			set
			{
				if ((this._PublisherId != value))
				{
					if (this._Publisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublisherIdChanging(value);
					this.SendPropertyChanging();
					this._PublisherId = value;
					this.SendPropertyChanged("PublisherId");
					this.OnPublisherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearOfAdmission", DbType="Int")]
		public System.Nullable<int> YearOfAdmission
		{
			get
			{
				return this._YearOfAdmission;
			}
			set
			{
				if ((this._YearOfAdmission != value))
				{
					this.OnYearOfAdmissionChanging(value);
					this.SendPropertyChanging();
					this._YearOfAdmission = value;
					this.SendPropertyChanged("YearOfAdmission");
					this.OnYearOfAdmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialisationCategoryId", DbType="Int")]
		public System.Nullable<int> SpecialisationCategoryId
		{
			get
			{
				return this._SpecialisationCategoryId;
			}
			set
			{
				if ((this._SpecialisationCategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialisationCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialisationCategoryId = value;
					this.SendPropertyChanged("SpecialisationCategoryId");
					this.OnSpecialisationCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployerName", DbType="NVarChar(100)")]
		public string EmployerName
		{
			get
			{
				return this._EmployerName;
			}
			set
			{
				if ((this._EmployerName != value))
				{
					this.OnEmployerNameChanging(value);
					this.SendPropertyChanging();
					this._EmployerName = value;
					this.SendPropertyChanged("EmployerName");
					this.OnEmployerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedAsLawyer", DbType="Bit")]
		public System.Nullable<bool> ApprovedAsLawyer
		{
			get
			{
				return this._ApprovedAsLawyer;
			}
			set
			{
				if ((this._ApprovedAsLawyer != value))
				{
					this.OnApprovedAsLawyerChanging(value);
					this.SendPropertyChanging();
					this._ApprovedAsLawyer = value;
					this.SendPropertyChanged("ApprovedAsLawyer");
					this.OnApprovedAsLawyerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ReviewDate
		{
			get
			{
				return this._ReviewDate;
			}
			set
			{
				if ((this._ReviewDate != value))
				{
					this.OnReviewDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewDate = value;
					this.SendPropertyChanged("ReviewDate");
					this.OnReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewedByUserId", DbType="Int")]
		public System.Nullable<int> ReviewedByUserId
		{
			get
			{
				return this._ReviewedByUserId;
			}
			set
			{
				if ((this._ReviewedByUserId != value))
				{
					this.OnReviewedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._ReviewedByUserId = value;
					this.SendPropertyChanged("ReviewedByUserId");
					this.OnReviewedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RejectionReason", DbType="NVarChar(MAX)")]
		public string RejectionReason
		{
			get
			{
				return this._RejectionReason;
			}
			set
			{
				if ((this._RejectionReason != value))
				{
					this.OnRejectionReasonChanging(value);
					this.SendPropertyChanging();
					this._RejectionReason = value;
					this.SendPropertyChanged("RejectionReason");
					this.OnRejectionReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanPublish", DbType="BIT")]
		public bool CanPublish
		{
			get
			{
				return this._CanPublish;
			}
			set
			{
				if ((this._CanPublish != value))
				{
					this.OnCanPublishChanging(value);
					this.SendPropertyChanging();
					this._CanPublish = value;
					this.SendPropertyChanged("CanPublish");
					this.OnCanPublishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasPractisingAuthority", DbType="BIT")]
		public bool HasPractisingAuthority
		{
			get
			{
				return this._HasPractisingAuthority;
			}
			set
			{
				if ((this._HasPractisingAuthority != value))
				{
					this.OnHasPractisingAuthorityChanging(value);
					this.SendPropertyChanging();
					this._HasPractisingAuthority = value;
					this.SendPropertyChanged("HasPractisingAuthority");
					this.OnHasPractisingAuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DraftAnswer", Storage="_DraftAnswers", ThisKey="UserId", OtherKey="CreatedByUserId")]
		public EntitySet<DraftAnswer> DraftAnswers
		{
			get
			{
				return this._DraftAnswers;
			}
			set
			{
				this._DraftAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Question", Storage="_Questions", ThisKey="UserId", OtherKey="CreatedByUserId")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Question1", Storage="_Questions1", ThisKey="UserId", OtherKey="ReviewedByUserId")]
		public EntitySet<Question> Questions1
		{
			get
			{
				return this._Questions1;
			}
			set
			{
				this._Questions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Answer", Storage="_Answers", ThisKey="UserId", OtherKey="CreatedByUserId")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Answer1", Storage="_Answers1", ThisKey="UserId", OtherKey="ReviewedByUserId")]
		public EntitySet<Answer> Answers1
		{
			get
			{
				return this._Answers1;
			}
			set
			{
				this._Answers1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Event", Storage="_Events", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_User", Storage="_Category", ThisKey="SpecialisationCategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public Category SpecialisationCategory
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._SpecialisationCategoryId = value.CategoryId;
					}
					else
					{
						this._SpecialisationCategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SpecialisationCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_User", Storage="_Publisher", ThisKey="PublisherId", OtherKey="PublisherId", IsForeignKey=true)]
		public Publisher Publisher
		{
			get
			{
				return this._Publisher.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher.Entity;
				if (((previousValue != value) 
							|| (this._Publisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Publisher.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._PublisherId = value.PublisherId;
					}
					else
					{
						this._PublisherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Publisher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_User", Storage="_Region", ThisKey="RegionId", OtherKey="RegionId", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RegionId = value.RegionId;
					}
					else
					{
						this._RegionId = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConflictDeclaration_User", Storage="_ConflictDeclaration", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public ConflictDeclaration ConflictDeclaration
		{
			get
			{
				return this._ConflictDeclaration.Entity;
			}
			set
			{
				ConflictDeclaration previousValue = this._ConflictDeclaration.Entity;
				if (((previousValue != value) 
							|| (this._ConflictDeclaration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConflictDeclaration.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._ConflictDeclaration.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("ConflictDeclaration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DraftAnswers(DraftAnswer entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByUser = this;
		}
		
		private void detach_DraftAnswers(DraftAnswer entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByUser = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByUser = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByUser = null;
		}
		
		private void attach_Questions1(Question entity)
		{
			this.SendPropertyChanging();
			entity.ReviewedByUser = this;
		}
		
		private void detach_Questions1(Question entity)
		{
			this.SendPropertyChanging();
			entity.ReviewedByUser = null;
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByUser = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByUser = null;
		}
		
		private void attach_Answers1(Answer entity)
		{
			this.SendPropertyChanging();
			entity.ReviewedByUser = this;
		}
		
		private void detach_Answers1(Answer entity)
		{
			this.SendPropertyChanging();
			entity.ReviewedByUser = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class ConflictDeclaration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeclarationId;
		
		private int _UserId;
		
		private int _QuestionId;
		
		private System.DateTimeOffset _CreationDate;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeclarationIdChanging(int value);
    partial void OnDeclarationIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnCreationDateChanging(System.DateTimeOffset value);
    partial void OnCreationDateChanged();
    #endregion
		
		public ConflictDeclaration()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeclarationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeclarationId
		{
			get
			{
				return this._DeclarationId;
			}
			set
			{
				if ((this._DeclarationId != value))
				{
					this.OnDeclarationIdChanging(value);
					this.SendPropertyChanging();
					this._DeclarationId = value;
					this.SendPropertyChanged("DeclarationId");
					this.OnDeclarationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConflictDeclaration_Question", Storage="_Questions", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConflictDeclaration_User", Storage="_Users", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.ConflictDeclaration = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.ConflictDeclaration = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.ConflictDeclaration = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.ConflictDeclaration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class PublisherCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PublisherId;
		
		private int _CategoryId;
		
		private EntityRef<Publisher> _Publisher;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublisherIdChanging(int value);
    partial void OnPublisherIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    #endregion
		
		public PublisherCategory()
		{
			this._Publisher = default(EntityRef<Publisher>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherId", DbType="Int", IsPrimaryKey=true)]
		public int PublisherId
		{
			get
			{
				return this._PublisherId;
			}
			set
			{
				if ((this._PublisherId != value))
				{
					if (this._Publisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublisherIdChanging(value);
					this.SendPropertyChanging();
					this._PublisherId = value;
					this.SendPropertyChanged("PublisherId");
					this.OnPublisherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int", IsPrimaryKey=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_PublisherCategory", Storage="_Publisher", ThisKey="PublisherId", OtherKey="PublisherId", IsForeignKey=true)]
		public Publisher Publisher
		{
			get
			{
				return this._Publisher.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher.Entity;
				if (((previousValue != value) 
							|| (this._Publisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher.Entity = null;
						previousValue.PublisherCategories.Remove(this);
					}
					this._Publisher.Entity = value;
					if ((value != null))
					{
						value.PublisherCategories.Add(this);
						this._PublisherId = value.PublisherId;
					}
					else
					{
						this._PublisherId = default(int);
					}
					this.SendPropertyChanged("Publisher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_PublisherCategory", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				if ((this._Category.Entity != value))
				{
					this.SendPropertyChanging();
					this._Category.Entity = value;
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettingsId;
		
		private string _Key;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingsIdChanging(int value);
    partial void OnSettingsIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettingsId
		{
			get
			{
				return this._SettingsId;
			}
			set
			{
				if ((this._SettingsId != value))
				{
					this.OnSettingsIdChanging(value);
					this.SendPropertyChanging();
					this._SettingsId = value;
					this.SendPropertyChanged("SettingsId");
					this.OnSettingsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
